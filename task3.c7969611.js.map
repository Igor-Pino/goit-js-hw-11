{"version":3,"sources":["partials/js/task3.js"],"names":["refs","timerDays","document","querySelector","timerHours","timerMins","timerSecs","targetTime","Date","Timer","constructor","onTick","start","setInterval","currentTime","now","deltaTime","leftTime","getTimeComponents","time","days","Math","floor","hours","pad","mins","secs","value","String","padStart","timer","updateTimer","textContent"],"mappings":";;;AAgD2C,aAhD3C,QAAA,wBAEA,MAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,uBAClCC,WAAYF,SAASC,cAAc,wBACnCE,UAAWH,SAASC,cAAc,uBAClCG,UAAWJ,SAASC,cAAc,wBAGhCI,EAAa,IAAIC,KAAK,gBAE5B,MAAMC,EACFC,aAAY,OAACC,IACJA,KAAAA,OAASA,EAElBC,QAEIC,YAAY,KACNC,MAAAA,EAAcN,KAAKO,MACnBC,EAAYT,EAAaO,EACzBG,EAAW,KAAKC,kBAAkBF,GACnCL,KAAAA,OAAOM,IAET,KAGPC,kBAAkBC,GAMP,MAAA,CAAEC,KAJIC,KAAKC,MAAMH,EAAQ,OAIjBI,MAHD,KAAKC,IAAIH,KAAKC,MAAOH,EAAQ,MAAyB,OAG9CM,KAFT,KAAKD,IAAIH,KAAKC,MAAOH,EAAQ,KAAoB,MAElCO,KADf,KAAKF,IAAIH,KAAKC,MAAOH,EAAQ,IAAc,OAI5DK,IAAIG,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIzC,MAAMC,EAAQ,IAAIrB,EAAM,CAACE,OAAQoB,IAIjC,SAASA,GAAa,KAAEX,EAAF,MAAQG,EAAR,KAAeE,EAAf,KAAqBC,IACvC1B,EAAKC,UAAU+B,eAAiBZ,IAChCpB,EAAKI,WAAW4B,eAAiBT,IACjCvB,EAAKK,UAAU2B,eAAiBP,IAChCzB,EAAKM,UAAU0B,eAAiBN,IANpCI,EAAMlB","file":"task3.c7969611.js","sourceRoot":"../src","sourcesContent":["import '../../sass/main.scss';\n\nconst refs = {\n    timerDays: document.querySelector('[data-value=\"days\"]'),\n    timerHours: document.querySelector('[data-value=\"hours\"]'),\n    timerMins: document.querySelector('[data-value=\"mins\"]'),\n    timerSecs: document.querySelector('[data-value=\"secs\"]'),    \n}\n\nconst targetTime = new Date('Sep 13, 2021')\n\nclass Timer  {\n    constructor({onTick}) {\n        this.onTick = onTick\n    }\n    start(){\n    \n        setInterval(() => {\n        const currentTime = Date.now()\n        const deltaTime = targetTime - currentTime;\n        const leftTime = this.getTimeComponents(deltaTime)\n        this.onTick(leftTime)   \n        \n        }, 1000);  \n     \n    } \n    getTimeComponents(time) {\n\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n        return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }  \n}\n\nconst timer = new Timer({onTick: updateTimer});\n\ntimer.start()\n\nfunction updateTimer ({ days, hours, mins, secs }) {\n    refs.timerDays.textContent = `${days}`\n    refs.timerHours.textContent = `${hours}`\n    refs.timerMins.textContent = `${mins}`\n    refs.timerSecs.textContent = `${secs}`}"]}